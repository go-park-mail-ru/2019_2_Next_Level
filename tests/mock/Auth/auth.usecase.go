// Code generated by MockGen. DO NOT EDIT.
// Source: server\Auth\interface.go

// Package mock is a generated GoMock package.
package Auth

import (
	model "2019_2_Next_Level/internal/model"
	Auth "2019_2_Next_Level/internal/serverapi/server/Auth"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUsecase is a mock of Usecase interface
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// CheckAuth mocks base method
func (m *MockUsecase) CheckAuth(token string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAuth", token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAuth indicates an expected call of CheckAuth
func (mr *MockUsecaseMockRecorder) CheckAuth(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAuth", reflect.TypeOf((*MockUsecase)(nil).CheckAuth), token)
}

// SignIn mocks base method
func (m *MockUsecase) SignIn(login, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", login, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn
func (mr *MockUsecaseMockRecorder) SignIn(login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockUsecase)(nil).SignIn), login, password)
}

// SignUp mocks base method
func (m *MockUsecase) SignUp(user model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignUp indicates an expected call of SignUp
func (mr *MockUsecaseMockRecorder) SignUp(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockUsecase)(nil).SignUp), user)
}

// Logout mocks base method
func (m *MockUsecase) Logout(uuid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout
func (mr *MockUsecaseMockRecorder) Logout(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockUsecase)(nil).Logout), uuid)
}

// SetRepository mocks base method
func (m *MockUsecase) SetRepository(arg0 Auth.Repository) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRepository", arg0)
}

// SetRepository indicates an expected call of SetRepository
func (mr *MockUsecaseMockRecorder) SetRepository(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRepository", reflect.TypeOf((*MockUsecase)(nil).SetRepository), arg0)
}
