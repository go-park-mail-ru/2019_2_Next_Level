// Code generated by MockGen. DO NOT EDIT.
// Source: internal/serverapi/server/MailBox/repository.go

// Package MailBox is a generated GoMock package.
package MailBox

import (
	model "2019_2_Next_Level/internal/model"
	models "2019_2_Next_Level/internal/serverapi/server/MailBox/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMailRepository is a mock of MailRepository interface
type MockMailRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMailRepositoryMockRecorder
}

// MockMailRepositoryMockRecorder is the mock recorder for MockMailRepository
type MockMailRepositoryMockRecorder struct {
	mock *MockMailRepository
}

// NewMockMailRepository creates a new mock instance
func NewMockMailRepository(ctrl *gomock.Controller) *MockMailRepository {
	mock := &MockMailRepository{ctrl: ctrl}
	mock.recorder = &MockMailRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMailRepository) EXPECT() *MockMailRepositoryMockRecorder {
	return m.recorder
}

// GetEmailByCode mocks base method
func (m *MockMailRepository) GetEmailByCode(login string, code interface{}) (model.Email, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmailByCode", login, code)
	ret0, _ := ret[0].(model.Email)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmailByCode indicates an expected call of GetEmailByCode
func (mr *MockMailRepositoryMockRecorder) GetEmailByCode(login, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmailByCode", reflect.TypeOf((*MockMailRepository)(nil).GetEmailByCode), login, code)
}

// GetEmailList mocks base method
func (m *MockMailRepository) GetEmailList(login, folder string, sort interface{}, firstNumber, count int) ([]model.Email, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmailList", login, folder, sort, firstNumber, count)
	ret0, _ := ret[0].([]model.Email)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmailList indicates an expected call of GetEmailList
func (mr *MockMailRepositoryMockRecorder) GetEmailList(login, folder, sort, firstNumber, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmailList", reflect.TypeOf((*MockMailRepository)(nil).GetEmailList), login, folder, sort, firstNumber, count)
}

// GetMessagesCount mocks base method
func (m *MockMailRepository) GetMessagesCount(login, folder string, flag interface{}) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessagesCount", login, folder, flag)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessagesCount indicates an expected call of GetMessagesCount
func (mr *MockMailRepositoryMockRecorder) GetMessagesCount(login, folder, flag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessagesCount", reflect.TypeOf((*MockMailRepository)(nil).GetMessagesCount), login, folder, flag)
}

// MarkMessages mocks base method
func (m *MockMailRepository) MarkMessages(login string, messagesID []models.MailID, mark interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkMessages", login, messagesID, mark)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkMessages indicates an expected call of MarkMessages
func (mr *MockMailRepositoryMockRecorder) MarkMessages(login, messagesID, mark interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkMessages", reflect.TypeOf((*MockMailRepository)(nil).MarkMessages), login, messagesID, mark)
}

// PutSentMessage mocks base method
func (m *MockMailRepository) PutSentMessage(email model.Email) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutSentMessage", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutSentMessage indicates an expected call of PutSentMessage
func (mr *MockMailRepositoryMockRecorder) PutSentMessage(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutSentMessage", reflect.TypeOf((*MockMailRepository)(nil).PutSentMessage), email)
}

// AddFolder mocks base method
func (m *MockMailRepository) AddFolder(login, foldername string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFolder", login, foldername)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFolder indicates an expected call of AddFolder
func (mr *MockMailRepositoryMockRecorder) AddFolder(login, foldername interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFolder", reflect.TypeOf((*MockMailRepository)(nil).AddFolder), login, foldername)
}

// ChangeMailFolder mocks base method
func (m *MockMailRepository) ChangeMailFolder(login, foldername string, mailid int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeMailFolder", login, foldername, mailid)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeMailFolder indicates an expected call of ChangeMailFolder
func (mr *MockMailRepositoryMockRecorder) ChangeMailFolder(login, foldername, mailid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeMailFolder", reflect.TypeOf((*MockMailRepository)(nil).ChangeMailFolder), login, foldername, mailid)
}
