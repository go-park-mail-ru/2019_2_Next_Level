// Code generated by MockGen. DO NOT EDIT.
// Source: internal/serverapi/server/User/repository.go

// Package serverapi is a generated GoMock package.
package serverapi

import (
	model "2019_2_Next_Level/internal/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserRepository is a mock of UserRepository interface
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// GetUser mocks base method
func (m *MockUserRepository) GetUser(login string) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", login)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser
func (mr *MockUserRepositoryMockRecorder) GetUser(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserRepository)(nil).GetUser), login)
}

// GetUserFolders mocks base method
func (m *MockUserRepository) GetUserFolders(login string) ([]model.Folder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserFolders", login)
	ret0, _ := ret[0].([]model.Folder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserFolders indicates an expected call of GetUserFolders
func (mr *MockUserRepositoryMockRecorder) GetUserFolders(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFolders", reflect.TypeOf((*MockUserRepository)(nil).GetUserFolders), login)
}

// UpdateUserData mocks base method
func (m *MockUserRepository) UpdateUserData(arg0 *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserData", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserData indicates an expected call of UpdateUserData
func (mr *MockUserRepositoryMockRecorder) UpdateUserData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserData", reflect.TypeOf((*MockUserRepository)(nil).UpdateUserData), arg0)
}

// UpdateUserPassword mocks base method
func (m *MockUserRepository) UpdateUserPassword(login, newPassword, sault string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPassword", login, newPassword, sault)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserPassword indicates an expected call of UpdateUserPassword
func (mr *MockUserRepositoryMockRecorder) UpdateUserPassword(login, newPassword, sault interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPassword", reflect.TypeOf((*MockUserRepository)(nil).UpdateUserPassword), login, newPassword, sault)
}

// GetUserCredentials mocks base method
func (m *MockUserRepository) GetUserCredentials(login string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCredentials", login)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserCredentials indicates an expected call of GetUserCredentials
func (mr *MockUserRepositoryMockRecorder) GetUserCredentials(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCredentials", reflect.TypeOf((*MockUserRepository)(nil).GetUserCredentials), login)
}
