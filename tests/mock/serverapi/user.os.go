// Code generated by MockGen. DO NOT EDIT.
// Source: internal/serverapi/server/User/t.go

// Package serverapi is a generated GoMock package.
package serverapi

import (
	gomock "github.com/golang/mock/gomock"
	os "os"
	reflect "reflect"
)

// MockFSI is a mock of FSI interface
type MockFSI struct {
	ctrl     *gomock.Controller
	recorder *MockFSIMockRecorder
}

// MockFSIMockRecorder is the mock recorder for MockFSI
type MockFSIMockRecorder struct {
	mock *MockFSI
}

// NewMockFSI creates a new mock instance
func NewMockFSI(ctrl *gomock.Controller) *MockFSI {
	mock := &MockFSI{ctrl: ctrl}
	mock.recorder = &MockFSIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFSI) EXPECT() *MockFSIMockRecorder {
	return m.recorder
}

// OpenFile mocks base method
func (m *MockFSI) OpenFile(name string, flag int, perm os.FileMode) (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenFile", name, flag, perm)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenFile indicates an expected call of OpenFile
func (mr *MockFSIMockRecorder) OpenFile(name, flag, perm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenFile", reflect.TypeOf((*MockFSI)(nil).OpenFile), name, flag, perm)
}
