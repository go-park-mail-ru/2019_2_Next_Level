// Code generated by MockGen. DO NOT EDIT.
// Source: internal/serverapi/server/MailBox/usecase.go

// Package serverapi is a generated GoMock package.
package serverapi

import (
	model "2019_2_Next_Level/internal/model"
	models "2019_2_Next_Level/internal/serverapi/server/MailBox/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMailBoxUseCase is a mock of MailBoxUseCase interface
type MockMailBoxUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockMailBoxUseCaseMockRecorder
}

// MockMailBoxUseCaseMockRecorder is the mock recorder for MockMailBoxUseCase
type MockMailBoxUseCaseMockRecorder struct {
	mock *MockMailBoxUseCase
}

// NewMockMailBoxUseCase creates a new mock instance
func NewMockMailBoxUseCase(ctrl *gomock.Controller) *MockMailBoxUseCase {
	mock := &MockMailBoxUseCase{ctrl: ctrl}
	mock.recorder = &MockMailBoxUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMailBoxUseCase) EXPECT() *MockMailBoxUseCaseMockRecorder {
	return m.recorder
}

// SendMail mocks base method
func (m *MockMailBoxUseCase) SendMail(email *model.Email) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMail", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMail indicates an expected call of SendMail
func (mr *MockMailBoxUseCaseMockRecorder) SendMail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMail", reflect.TypeOf((*MockMailBoxUseCase)(nil).SendMail), email)
}

// GetMailList mocks base method
func (m *MockMailBoxUseCase) GetMailList(login, folder, sort string, from, count int) ([]model.Email, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMailList", login, folder, sort, from, count)
	ret0, _ := ret[0].([]model.Email)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMailList indicates an expected call of GetMailList
func (mr *MockMailBoxUseCaseMockRecorder) GetMailList(login, folder, sort, from, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMailList", reflect.TypeOf((*MockMailBoxUseCase)(nil).GetMailList), login, folder, sort, from, count)
}

// GetMailListPlain mocks base method
func (m *MockMailBoxUseCase) GetMailListPlain(login string, page int) (int, int, []model.Email, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMailListPlain", login, page)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].([]model.Email)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetMailListPlain indicates an expected call of GetMailListPlain
func (mr *MockMailBoxUseCaseMockRecorder) GetMailListPlain(login, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMailListPlain", reflect.TypeOf((*MockMailBoxUseCase)(nil).GetMailListPlain), login, page)
}

// GetMail mocks base method
func (m *MockMailBoxUseCase) GetMail(login string, mailID []models.MailID) ([]model.Email, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMail", login, mailID)
	ret0, _ := ret[0].([]model.Email)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMail indicates an expected call of GetMail
func (mr *MockMailBoxUseCaseMockRecorder) GetMail(login, mailID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMail", reflect.TypeOf((*MockMailBoxUseCase)(nil).GetMail), login, mailID)
}

// GetUnreadCount mocks base method
func (m *MockMailBoxUseCase) GetUnreadCount(login string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnreadCount", login)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnreadCount indicates an expected call of GetUnreadCount
func (mr *MockMailBoxUseCaseMockRecorder) GetUnreadCount(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnreadCount", reflect.TypeOf((*MockMailBoxUseCase)(nil).GetUnreadCount), login)
}

// MarkMail mocks base method
func (m *MockMailBoxUseCase) MarkMail(login string, ids []models.MailID, mark int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkMail", login, ids, mark)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkMail indicates an expected call of MarkMail
func (mr *MockMailBoxUseCaseMockRecorder) MarkMail(login, ids, mark interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkMail", reflect.TypeOf((*MockMailBoxUseCase)(nil).MarkMail), login, ids, mark)
}

// AddFolder mocks base method
func (m *MockMailBoxUseCase) AddFolder(login, foldername string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFolder", login, foldername)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFolder indicates an expected call of AddFolder
func (mr *MockMailBoxUseCaseMockRecorder) AddFolder(login, foldername interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFolder", reflect.TypeOf((*MockMailBoxUseCase)(nil).AddFolder), login, foldername)
}

// DeleteFolder mocks base method
func (m *MockMailBoxUseCase) DeleteFolder(login, foldername string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFolder", login, foldername)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFolder indicates an expected call of DeleteFolder
func (mr *MockMailBoxUseCaseMockRecorder) DeleteFolder(login, foldername interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFolder", reflect.TypeOf((*MockMailBoxUseCase)(nil).DeleteFolder), login, foldername)
}

// ChangeMailFolder mocks base method
func (m *MockMailBoxUseCase) ChangeMailFolder(login, foldername string, mailid int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeMailFolder", login, foldername, mailid)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeMailFolder indicates an expected call of ChangeMailFolder
func (mr *MockMailBoxUseCaseMockRecorder) ChangeMailFolder(login, foldername, mailid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeMailFolder", reflect.TypeOf((*MockMailBoxUseCase)(nil).ChangeMailFolder), login, foldername, mailid)
}

// FindMessages mocks base method
func (m *MockMailBoxUseCase) FindMessages(login, request string) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMessages", login, request)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMessages indicates an expected call of FindMessages
func (mr *MockMailBoxUseCaseMockRecorder) FindMessages(login, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMessages", reflect.TypeOf((*MockMailBoxUseCase)(nil).FindMessages), login, request)
}
