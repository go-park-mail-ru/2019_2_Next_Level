// Code generated by MockGen. DO NOT EDIT.
// Source: ./server/MailBox/usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	model "2019_2_Next_Level/internal/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMailBoxUseCase is a mock of MailBoxUseCase interface
type MockMailBoxUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockMailBoxUseCaseMockRecorder
}

// MockMailBoxUseCaseMockRecorder is the mock recorder for MockMailBoxUseCase
type MockMailBoxUseCaseMockRecorder struct {
	mock *MockMailBoxUseCase
}

// NewMockMailBoxUseCase creates a new mock instance
func NewMockMailBoxUseCase(ctrl *gomock.Controller) *MockMailBoxUseCase {
	mock := &MockMailBoxUseCase{ctrl: ctrl}
	mock.recorder = &MockMailBoxUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMailBoxUseCase) EXPECT() *MockMailBoxUseCaseMockRecorder {
	return m.recorder
}

// SendMail mocks base method
func (m *MockMailBoxUseCase) SendMail(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMail", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMail indicates an expected call of SendMail
func (mr *MockMailBoxUseCaseMockRecorder) SendMail(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMail", reflect.TypeOf((*MockMailBoxUseCase)(nil).SendMail), arg0, arg1, arg2)
}

// GetMailList mocks base method
func (m *MockMailBoxUseCase) GetMailList(login, folder, sort string, from, count int) ([]model.Email, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMailList", login, folder, sort, from, count)
	ret0, _ := ret[0].([]model.Email)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMailList indicates an expected call of GetMailList
func (mr *MockMailBoxUseCaseMockRecorder) GetMailList(login, folder, sort, from, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMailList", reflect.TypeOf((*MockMailBoxUseCase)(nil).GetMailList), login, folder, sort, from, count)
}

// GetMail mocks base method
func (m *MockMailBoxUseCase) GetMail(login, mailID string) (model.Email, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMail", login, mailID)
	ret0, _ := ret[0].(model.Email)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMail indicates an expected call of GetMail
func (mr *MockMailBoxUseCaseMockRecorder) GetMail(login, mailID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMail", reflect.TypeOf((*MockMailBoxUseCase)(nil).GetMail), login, mailID)
}
