package outpq

import "sync"

const (
	queueSize = 100
)

type Elem interface {
}
type Outpq struct {
	// instance *Outpq
	// once     sync.Once
	// queue chan interface{}
	Input  chan interface{}
	Output chan interface{}
}

var once sync.Once
var instance *Outpq

func GetInstance() *Outpq {
	// once вызывается лишь один раз, потокобезопасный
	once.Do(func() {
		instance = &Outpq{}
		instance.Init()
	})
	return instance
}
func (q *Outpq) Init() {
	instance.Input = make(chan interface{}, queueSize)
	instance.Output = make(chan interface{}, queueSize)
	go instance.Worker()
}
func (q *Outpq) Worker() {
	q.Output <- q.Input
}

// func (q *Outpq) GetInstance() *Outpq {
// 	// once вызывается лишь один раз, потокобезопасный
// 	q.once.Do(func() {
// 		q.instance = &Outpq{}
// 		q.queue = make(chan interface{}, queueSize)
// 	})
// 	return q.instance
// }

func (q *Outpq) Enqueue(elem *Elem) {
	// q.queue <- *elem
	q.Input <- *elem
}

func (q *Outpq) Dequeue() Elem {
	// return <-q.queue
	data := <-q.Output
	return data
}
