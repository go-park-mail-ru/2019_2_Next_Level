// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package post

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6615c02eDecode20192NextLevelInternalPost(in *jlexer.Lexer, out *SMTPConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Port":
			out.Port = string(in.String())
		case "ChannelCapasity":
			out.ChannelCapasity = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncode20192NextLevelInternalPost(out *jwriter.Writer, in SMTPConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Port\":"
		out.RawString(prefix[1:])
		out.String(string(in.Port))
	}
	{
		const prefix string = ",\"ChannelCapasity\":"
		out.RawString(prefix)
		out.Int(int(in.ChannelCapasity))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SMTPConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncode20192NextLevelInternalPost(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SMTPConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncode20192NextLevelInternalPost(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SMTPConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecode20192NextLevelInternalPost(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SMTPConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecode20192NextLevelInternalPost(l, v)
}
func easyjson6615c02eDecode20192NextLevelInternalPost1(in *jlexer.Lexer, out *PostServiceConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "OutcomingQueue":
			(out.OutcomingQueue).UnmarshalEasyJSON(in)
		case "IncomingQueue":
			(out.IncomingQueue).UnmarshalEasyJSON(in)
		case "Smtp":
			(out.Smtp).UnmarshalEasyJSON(in)
		case "ChannelCapasity":
			out.ChannelCapasity = int(in.Int())
		case "Login":
			out.Login = string(in.String())
		case "Password":
			out.Password = string(in.String())
		case "Host":
			out.Host = string(in.String())
		case "Port":
			out.Port = string(in.String())
		case "ListenPort":
			out.ListenPort = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncode20192NextLevelInternalPost1(out *jwriter.Writer, in PostServiceConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"OutcomingQueue\":"
		out.RawString(prefix[1:])
		(in.OutcomingQueue).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"IncomingQueue\":"
		out.RawString(prefix)
		(in.IncomingQueue).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Smtp\":"
		out.RawString(prefix)
		(in.Smtp).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"ChannelCapasity\":"
		out.RawString(prefix)
		out.Int(int(in.ChannelCapasity))
	}
	{
		const prefix string = ",\"Login\":"
		out.RawString(prefix)
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"Password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"Host\":"
		out.RawString(prefix)
		out.String(string(in.Host))
	}
	{
		const prefix string = ",\"Port\":"
		out.RawString(prefix)
		out.String(string(in.Port))
	}
	{
		const prefix string = ",\"ListenPort\":"
		out.RawString(prefix)
		out.String(string(in.ListenPort))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PostServiceConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncode20192NextLevelInternalPost1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PostServiceConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncode20192NextLevelInternalPost1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PostServiceConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecode20192NextLevelInternalPost1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PostServiceConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecode20192NextLevelInternalPost1(l, v)
}
func easyjson6615c02eDecode20192NextLevelInternalPost2(in *jlexer.Lexer, out *MessageQueueConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Port":
			out.Port = string(in.String())
		case "ChannelCapasity":
			out.ChannelCapasity = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncode20192NextLevelInternalPost2(out *jwriter.Writer, in MessageQueueConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Port\":"
		out.RawString(prefix[1:])
		out.String(string(in.Port))
	}
	{
		const prefix string = ",\"ChannelCapasity\":"
		out.RawString(prefix)
		out.Int(int(in.ChannelCapasity))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MessageQueueConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncode20192NextLevelInternalPost2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MessageQueueConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncode20192NextLevelInternalPost2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MessageQueueConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecode20192NextLevelInternalPost2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MessageQueueConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecode20192NextLevelInternalPost2(l, v)
}
