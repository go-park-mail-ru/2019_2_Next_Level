// +build !test

// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package http

import (
	model "2019_2_Next_Level/internal/model"
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson559270aeDecode20192NextLevelInternalServerapiServerUserHttp(in *jlexer.Lexer, out *GetUserProfileAnswer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "firstName":
			out.Name = string(in.String())
		case "secondName":
			out.Sirname = string(in.String())
		case "birthDate":
			out.BirthDate = string(in.String())
		case "sex":
			out.Sex = string(in.String())
		case "login":
			out.Email = string(in.String())
		case "avatar":
			out.Avatar = string(in.String())
		case "nickName":
			out.Login = string(in.String())
		case "folders":
			if in.IsNull() {
				in.Skip()
				out.Folders = nil
			} else {
				in.Delim('[')
				if out.Folders == nil {
					if !in.IsDelim(']') {
						out.Folders = make([]model.Folder, 0, 2)
					} else {
						out.Folders = []model.Folder{}
					}
				} else {
					out.Folders = (out.Folders)[:0]
				}
				for !in.IsDelim(']') {
					var v1 model.Folder
					easyjson559270aeDecode20192NextLevelInternalModel(in, &v1)
					out.Folders = append(out.Folders, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncode20192NextLevelInternalServerapiServerUserHttp(out *jwriter.Writer, in GetUserProfileAnswer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"firstName\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"secondName\":"
		out.RawString(prefix)
		out.String(string(in.Sirname))
	}
	{
		const prefix string = ",\"birthDate\":"
		out.RawString(prefix)
		out.String(string(in.BirthDate))
	}
	{
		const prefix string = ",\"sex\":"
		out.RawString(prefix)
		out.String(string(in.Sex))
	}
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	{
		const prefix string = ",\"nickName\":"
		out.RawString(prefix)
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"folders\":"
		out.RawString(prefix)
		if in.Folders == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Folders {
				if v2 > 0 {
					out.RawByte(',')
				}
				easyjson559270aeEncode20192NextLevelInternalModel(out, v3)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetUserProfileAnswer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncode20192NextLevelInternalServerapiServerUserHttp(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetUserProfileAnswer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncode20192NextLevelInternalServerapiServerUserHttp(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetUserProfileAnswer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecode20192NextLevelInternalServerapiServerUserHttp(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetUserProfileAnswer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecode20192NextLevelInternalServerapiServerUserHttp(l, v)
}
func easyjson559270aeDecode20192NextLevelInternalModel(in *jlexer.Lexer, out *model.Folder) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "capacity":
			out.MessageCount = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncode20192NextLevelInternalModel(out *jwriter.Writer, in model.Folder) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"capacity\":"
		out.RawString(prefix)
		out.Int64(int64(in.MessageCount))
	}
	out.RawByte('}')
}
func easyjson559270aeDecode20192NextLevelInternalServerapiServerUserHttp1(in *jlexer.Lexer, out *GetUserProfile) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		case "userInfo":
			(out.Answer).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncode20192NextLevelInternalServerapiServerUserHttp1(out *jwriter.Writer, in GetUserProfile) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"userInfo\":"
		out.RawString(prefix)
		(in.Answer).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetUserProfile) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncode20192NextLevelInternalServerapiServerUserHttp1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetUserProfile) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncode20192NextLevelInternalServerapiServerUserHttp1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetUserProfile) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecode20192NextLevelInternalServerapiServerUserHttp1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetUserProfile) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecode20192NextLevelInternalServerapiServerUserHttp1(l, v)
}
