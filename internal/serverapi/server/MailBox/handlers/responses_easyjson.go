// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package handlers

import (
	models "2019_2_Next_Level/internal/serverapi/server/MailBox/models"
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson559270aeDecode20192NextLevelInternalServerapiServerMailBoxHandlers(in *jlexer.Lexer, out *GetMessagesListResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		case "messages":
			if in.IsNull() {
				in.Skip()
				out.Messages = nil
			} else {
				in.Delim('[')
				if out.Messages == nil {
					if !in.IsDelim(']') {
						out.Messages = make([]models.MailToGet, 0, 1)
					} else {
						out.Messages = []models.MailToGet{}
					}
				} else {
					out.Messages = (out.Messages)[:0]
				}
				for !in.IsDelim(']') {
					var v1 models.MailToGet
					(v1).UnmarshalEasyJSON(in)
					out.Messages = append(out.Messages, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncode20192NextLevelInternalServerapiServerMailBoxHandlers(out *jwriter.Writer, in GetMessagesListResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"messages\":"
		out.RawString(prefix)
		if in.Messages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Messages {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetMessagesListResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncode20192NextLevelInternalServerapiServerMailBoxHandlers(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetMessagesListResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncode20192NextLevelInternalServerapiServerMailBoxHandlers(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetMessagesListResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecode20192NextLevelInternalServerapiServerMailBoxHandlers(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetMessagesListResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecode20192NextLevelInternalServerapiServerMailBoxHandlers(l, v)
}
func easyjson559270aeDecode20192NextLevelInternalServerapiServerMailBoxHandlers1(in *jlexer.Lexer, out *GetMessagesList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		case "messages":
			if in.IsNull() {
				in.Skip()
				out.Messages = nil
			} else {
				in.Delim('[')
				if out.Messages == nil {
					if !in.IsDelim(']') {
						out.Messages = make([]int64, 0, 8)
					} else {
						out.Messages = []int64{}
					}
				} else {
					out.Messages = (out.Messages)[:0]
				}
				for !in.IsDelim(']') {
					var v4 int64
					v4 = int64(in.Int64())
					out.Messages = append(out.Messages, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncode20192NextLevelInternalServerapiServerMailBoxHandlers1(out *jwriter.Writer, in GetMessagesList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"messages\":"
		out.RawString(prefix)
		if in.Messages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Messages {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v6))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetMessagesList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncode20192NextLevelInternalServerapiServerMailBoxHandlers1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetMessagesList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncode20192NextLevelInternalServerapiServerMailBoxHandlers1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetMessagesList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecode20192NextLevelInternalServerapiServerMailBoxHandlers1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetMessagesList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecode20192NextLevelInternalServerapiServerMailBoxHandlers1(l, v)
}
func easyjson559270aeDecode20192NextLevelInternalServerapiServerMailBoxHandlers2(in *jlexer.Lexer, out *GetMessagesCountResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		case "count":
			out.Count = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncode20192NextLevelInternalServerapiServerMailBoxHandlers2(out *jwriter.Writer, in GetMessagesCountResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix)
		out.Int(int(in.Count))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetMessagesCountResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncode20192NextLevelInternalServerapiServerMailBoxHandlers2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetMessagesCountResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncode20192NextLevelInternalServerapiServerMailBoxHandlers2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetMessagesCountResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecode20192NextLevelInternalServerapiServerMailBoxHandlers2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetMessagesCountResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecode20192NextLevelInternalServerapiServerMailBoxHandlers2(l, v)
}
func easyjson559270aeDecode20192NextLevelInternalServerapiServerMailBoxHandlers3(in *jlexer.Lexer, out *GetMessageResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		case "message":
			(out.Message).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncode20192NextLevelInternalServerapiServerMailBoxHandlers3(out *jwriter.Writer, in GetMessageResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		(in.Message).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetMessageResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncode20192NextLevelInternalServerapiServerMailBoxHandlers3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetMessageResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncode20192NextLevelInternalServerapiServerMailBoxHandlers3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetMessageResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecode20192NextLevelInternalServerapiServerMailBoxHandlers3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetMessageResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecode20192NextLevelInternalServerapiServerMailBoxHandlers3(l, v)
}
func easyjson559270aeDecode20192NextLevelInternalServerapiServerMailBoxHandlers4(in *jlexer.Lexer, out *GetFolderMessagesResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		case "pagesCount":
			out.PagesCount = int(in.Int())
		case "page":
			out.Page = int(in.Int())
		case "messages":
			if in.IsNull() {
				in.Skip()
				out.Messages = nil
			} else {
				in.Delim('[')
				if out.Messages == nil {
					if !in.IsDelim(']') {
						out.Messages = make([]models.MailToGet, 0, 1)
					} else {
						out.Messages = []models.MailToGet{}
					}
				} else {
					out.Messages = (out.Messages)[:0]
				}
				for !in.IsDelim(']') {
					var v7 models.MailToGet
					(v7).UnmarshalEasyJSON(in)
					out.Messages = append(out.Messages, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncode20192NextLevelInternalServerapiServerMailBoxHandlers4(out *jwriter.Writer, in GetFolderMessagesResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"pagesCount\":"
		out.RawString(prefix)
		out.Int(int(in.PagesCount))
	}
	{
		const prefix string = ",\"page\":"
		out.RawString(prefix)
		out.Int(int(in.Page))
	}
	{
		const prefix string = ",\"messages\":"
		out.RawString(prefix)
		if in.Messages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Messages {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetFolderMessagesResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncode20192NextLevelInternalServerapiServerMailBoxHandlers4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetFolderMessagesResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncode20192NextLevelInternalServerapiServerMailBoxHandlers4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetFolderMessagesResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecode20192NextLevelInternalServerapiServerMailBoxHandlers4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetFolderMessagesResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecode20192NextLevelInternalServerapiServerMailBoxHandlers4(l, v)
}
