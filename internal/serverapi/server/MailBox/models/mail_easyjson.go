// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson7feca409Decode20192NextLevelInternalServerapiServerMailBoxModels(in *jlexer.Lexer, out *Sender) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "email":
			out.Email = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7feca409Encode20192NextLevelInternalServerapiServerMailBoxModels(out *jwriter.Writer, in Sender) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Sender) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7feca409Encode20192NextLevelInternalServerapiServerMailBoxModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Sender) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7feca409Encode20192NextLevelInternalServerapiServerMailBoxModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Sender) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7feca409Decode20192NextLevelInternalServerapiServerMailBoxModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Sender) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7feca409Decode20192NextLevelInternalServerapiServerMailBoxModels(l, v)
}
func easyjson7feca409Decode20192NextLevelInternalServerapiServerMailBoxModels1(in *jlexer.Lexer, out *MailToSend) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "to":
			if in.IsNull() {
				in.Skip()
				out.To = nil
			} else {
				in.Delim('[')
				if out.To == nil {
					if !in.IsDelim(']') {
						out.To = make([]string, 0, 4)
					} else {
						out.To = []string{}
					}
				} else {
					out.To = (out.To)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.To = append(out.To, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "subject":
			out.Subject = string(in.String())
		case "reply_to":
			if in.IsNull() {
				in.Skip()
				out.ReplyTo = nil
			} else {
				in.Delim('[')
				if out.ReplyTo == nil {
					if !in.IsDelim(']') {
						out.ReplyTo = make([]string, 0, 4)
					} else {
						out.ReplyTo = []string{}
					}
				} else {
					out.ReplyTo = (out.ReplyTo)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.ReplyTo = append(out.ReplyTo, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "content":
			out.Content = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7feca409Encode20192NextLevelInternalServerapiServerMailBoxModels1(out *jwriter.Writer, in MailToSend) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"to\":"
		out.RawString(prefix[1:])
		if in.To == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.To {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.String(string(v4))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"subject\":"
		out.RawString(prefix)
		out.String(string(in.Subject))
	}
	if len(in.ReplyTo) != 0 {
		const prefix string = ",\"reply_to\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v5, v6 := range in.ReplyTo {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"content\":"
		out.RawString(prefix)
		out.String(string(in.Content))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MailToSend) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7feca409Encode20192NextLevelInternalServerapiServerMailBoxModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MailToSend) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7feca409Encode20192NextLevelInternalServerapiServerMailBoxModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MailToSend) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7feca409Decode20192NextLevelInternalServerapiServerMailBoxModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MailToSend) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7feca409Decode20192NextLevelInternalServerapiServerMailBoxModels1(l, v)
}
func easyjson7feca409Decode20192NextLevelInternalServerapiServerMailBoxModels2(in *jlexer.Lexer, out *MailToGet) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = MailID(in.Int64())
		case "from":
			(out.From).UnmarshalEasyJSON(in)
		case "to":
			(out.To).UnmarshalEasyJSON(in)
		case "subject":
			out.Subject = string(in.String())
		case "content":
			out.Content = string(in.String())
		case "replies":
			if in.IsNull() {
				in.Skip()
				out.Replies = nil
			} else {
				in.Delim('[')
				if out.Replies == nil {
					if !in.IsDelim(']') {
						out.Replies = make([]MailID, 0, 8)
					} else {
						out.Replies = []MailID{}
					}
				} else {
					out.Replies = (out.Replies)[:0]
				}
				for !in.IsDelim(']') {
					var v7 MailID
					v7 = MailID(in.Int64())
					out.Replies = append(out.Replies, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "read":
			out.Read = bool(in.Bool())
		case "folder":
			out.Folder = string(in.String())
		case "date":
			out.Date = string(in.String())
		case "direction":
			out.Direction = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7feca409Encode20192NextLevelInternalServerapiServerMailBoxModels2(out *jwriter.Writer, in MailToGet) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Id))
	}
	{
		const prefix string = ",\"from\":"
		out.RawString(prefix)
		(in.From).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"to\":"
		out.RawString(prefix)
		(in.To).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"subject\":"
		out.RawString(prefix)
		out.String(string(in.Subject))
	}
	{
		const prefix string = ",\"content\":"
		out.RawString(prefix)
		out.String(string(in.Content))
	}
	if len(in.Replies) != 0 {
		const prefix string = ",\"replies\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v8, v9 := range in.Replies {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v9))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"read\":"
		out.RawString(prefix)
		out.Bool(bool(in.Read))
	}
	{
		const prefix string = ",\"folder\":"
		out.RawString(prefix)
		out.String(string(in.Folder))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.String(string(in.Date))
	}
	{
		const prefix string = ",\"direction\":"
		out.RawString(prefix)
		out.String(string(in.Direction))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MailToGet) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7feca409Encode20192NextLevelInternalServerapiServerMailBoxModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MailToGet) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7feca409Encode20192NextLevelInternalServerapiServerMailBoxModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MailToGet) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7feca409Decode20192NextLevelInternalServerapiServerMailBoxModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MailToGet) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7feca409Decode20192NextLevelInternalServerapiServerMailBoxModels2(l, v)
}
