// Code generated by MockGen. DO NOT EDIT.
// Source: server\Auth\postgres.go

// Package mock is a generated GoMock package.
package mock

import (
	model "2019_2_Next_Level/internal/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetLoginBySession mocks base method
func (m *MockRepository) GetLoginBySession(uuid string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoginBySession", uuid)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoginBySession indicates an expected call of GetLoginBySession
func (mr *MockRepositoryMockRecorder) GetLoginBySession(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoginBySession", reflect.TypeOf((*MockRepository)(nil).GetLoginBySession), uuid)
}

// AddNewSession mocks base method
func (m *MockRepository) AddNewSession(login, uuid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewSession", login, uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNewSession indicates an expected call of AddNewSession
func (mr *MockRepositoryMockRecorder) AddNewSession(login, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewSession", reflect.TypeOf((*MockRepository)(nil).AddNewSession), login, uuid)
}

// DeleteSession mocks base method
func (m *MockRepository) DeleteSession(uuiв string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", uuiв)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession
func (mr *MockRepositoryMockRecorder) DeleteSession(uuiв interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockRepository)(nil).DeleteSession), uuiв)
}

// AddNewUser mocks base method
func (m *MockRepository) AddNewUser(arg0 *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNewUser indicates an expected call of AddNewUser
func (mr *MockRepositoryMockRecorder) AddNewUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewUser", reflect.TypeOf((*MockRepository)(nil).AddNewUser), arg0)
}

// GetUserCredentials mocks base method
func (m *MockRepository) GetUserCredentials(login string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCredentials", login)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCredentials indicates an expected call of GetUserCredentials
func (mr *MockRepositoryMockRecorder) GetUserCredentials(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCredentials", reflect.TypeOf((*MockRepository)(nil).GetUserCredentials), login)
}
