// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package config

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6615c02eDecode20192NextLevelInternalAuthConfig(in *jlexer.Lexer, out *MainConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Database":
			(out.DB).UnmarshalEasyJSON(in)
		case "authport":
			out.AuthPort = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncode20192NextLevelInternalAuthConfig(out *jwriter.Writer, in MainConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Database\":"
		out.RawString(prefix[1:])
		(in.DB).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"authport\":"
		out.RawString(prefix)
		out.String(string(in.AuthPort))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MainConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncode20192NextLevelInternalAuthConfig(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MainConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncode20192NextLevelInternalAuthConfig(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MainConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecode20192NextLevelInternalAuthConfig(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MainConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecode20192NextLevelInternalAuthConfig(l, v)
}
func easyjson6615c02eDecode20192NextLevelInternalAuthConfig1(in *jlexer.Lexer, out *Database) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Port":
			out.Port = string(in.String())
		case "Host":
			out.Host = string(in.String())
		case "DBName":
			out.DBName = string(in.String())
		case "User":
			out.User = string(in.String())
		case "Password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncode20192NextLevelInternalAuthConfig1(out *jwriter.Writer, in Database) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Port\":"
		out.RawString(prefix[1:])
		out.String(string(in.Port))
	}
	{
		const prefix string = ",\"Host\":"
		out.RawString(prefix)
		out.String(string(in.Host))
	}
	{
		const prefix string = ",\"DBName\":"
		out.RawString(prefix)
		out.String(string(in.DBName))
	}
	{
		const prefix string = ",\"User\":"
		out.RawString(prefix)
		out.String(string(in.User))
	}
	{
		const prefix string = ",\"Password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Database) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncode20192NextLevelInternalAuthConfig1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Database) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncode20192NextLevelInternalAuthConfig1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Database) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecode20192NextLevelInternalAuthConfig1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Database) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecode20192NextLevelInternalAuthConfig1(l, v)
}
